{{- if .Values.migrations }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-migration-job
  namespace: {{ .Release.Namespace }}

  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded

spec:
  activeDeadlineSeconds: 600
  template:
    spec:
      containers:

        - name: copy
          image: {{ .Values.global.image_prefix }}/{{ .Values.global.image }}:{{ .Values.global.image_tag }}
          command:
          - "bash"
          - "-ec"
          - |
            set -ex

            # copy migrations
            cp -av /migrations/* /mymigrations

            # create sqitch.conf
            echo '[core]' > /mymigrations/sqitch.conf
            echo 'engine = pg' >> /mymigrations/sqitch.conf
            echo 'plan_file = sqitch.plan' >> /mymigrations/sqitch.conf
            echo 'top_dir = .' >> /mymigrations/sqitch.conf
            echo '[engine "pg"]' >> /mymigrations/sqitch.conf
            echo '  registry = sqitch' >> /mymigrations/sqitch.conf
            echo '[deploy]' >> /mymigrations/sqitch.conf
            echo '  verify = true' >> /mymigrations/sqitch.conf
            echo '[rebase]' >> /mymigrations/sqitch.conf
            echo '  verify = true' >> /mymigrations/sqitch.conf
            echo '[target "octopod"]' >> /mymigrations/sqitch.conf
            echo 'uri = db:pg://{{ .Values.connections.pg_instance }}/{{ template "dbname" . }}' >> /mymigrations/sqitch.conf
          volumeMounts:
          - name: migrations
            mountPath: /mymigrations

        - name: migrations
          image: {{ .Values.global.image_prefix }}/{{ .Values.global.image }}:sqitch-v2.0.0
          command:
          - "bash"
          - "-ec"
          - |
            set -ex
{{- if .Values.seed }}
            echo 'check db'
            POSTGRESQL_CONN="psql postgresql://{{ .Values.connections.pg_instance }}/postgres"
            DBNAME={{ template "dbname" . }}
            ($POSTGRESQL_CONN -Atc "SELECT count(*) FROM pg_database WHERE lower(datname) = lower('$DBNAME');" | grep 1) || $POSTGRESQL_CONN -Atc "create database $DBNAME;"
{{- end }}
            echo 'run migrations...'
            cd /migrations && /usr/local/bin/sqitch deploy octopod
{{- if .Values.seed }}
            echo 'seed'
            DB_CONN="psql postgresql://{{ .Values.connections.pg_instance }}/{{ template "dbname" . }}"
            cd /migrations && $DB_CONN -1 -f seeds.sql || echo 'ok'
{{- end }}
          volumeMounts:
          - name: migrations
            mountPath: /migrations

      volumes:
        - name: migrations
          emptyDir: {}
      restartPolicy: Never
  backoffLimit: 2
{{- end }}
